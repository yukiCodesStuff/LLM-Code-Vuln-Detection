## $Id$ -*- autoconf -*-
dnl ## Process this file with autoconf to produce a configure script.

dnl include Zend specific macro definitions first
dnl -------------------------------------------------------------------------
sinclude(Zend/acinclude.m4)

dnl Basic autoconf + automake initialization, generation of config.nice.
dnl -------------------------------------------------------------------------

AC_PREREQ(2.59)
AC_INIT(README.GIT-RULES)
ifdef([AC_PRESERVE_HELP_ORDER], [AC_PRESERVE_HELP_ORDER], [])

PHP_CONFIG_NICE(config.nice)

PHP_CANONICAL_HOST_TARGET

AC_CONFIG_HEADER(main/php_config.h)
AH_TOP([
#if defined(__GNUC__) && __GNUC__ >= 4
# define ZEND_API __attribute__ ((visibility("default")))
# define ZEND_DLEXPORT __attribute__ ((visibility("default")))
#else
# define ZEND_API
# define ZEND_DLEXPORT
#endif

#define ZEND_DLIMPORT

#undef uint
#undef ulong

/* Define if you want to enable memory limit support */
#define MEMORY_LIMIT 0
])
AH_BOTTOM([
#ifndef ZEND_ACCONFIG_H_NO_C_PROTOS

#ifdef HAVE_STDLIB_H
# include <stdlib.h>
#endif

#ifdef HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif

#ifdef HAVE_SYS_SELECT_H
#include <sys/select.h>
#endif

#ifdef HAVE_IEEEFP_H
# include <ieeefp.h>
#endif

#ifdef HAVE_STRING_H
# include <string.h>
#else
# include <strings.h>
#endif

#if ZEND_BROKEN_SPRINTF
int zend_sprintf(char *buffer, const char *format, ...);
#else
# define zend_sprintf sprintf
#endif

#include <math.h>

/* To enable the is_nan, is_infinite and is_finite PHP functions */
#ifdef NETWARE
	#define HAVE_ISNAN 1
	#define HAVE_ISINF 1
	#define HAVE_ISFINITE 1
#endif

#ifndef zend_isnan
#ifdef HAVE_ISNAN
#define zend_isnan(a) isnan(a)
#elif defined(HAVE_FPCLASS)
#define zend_isnan(a) ((fpclass(a) == FP_SNAN) || (fpclass(a) == FP_QNAN))
#else
#define zend_isnan(a) 0
#endif
#endif

#ifdef HAVE_ISINF
#define zend_isinf(a) isinf(a)
#elif defined(INFINITY)
/* Might not work, but is required by ISO C99 */
#define zend_isinf(a) (((a)==INFINITY)?1:0)
#elif defined(HAVE_FPCLASS)
#define zend_isinf(a) ((fpclass(a) == FP_PINF) || (fpclass(a) == FP_NINF))
#else
#define zend_isinf(a) 0
#endif

#ifdef HAVE_FINITE
#define zend_finite(a) finite(a)
#elif defined(HAVE_ISFINITE) || defined(isfinite)
#define zend_finite(a) isfinite(a)
#elif defined(fpclassify)
#define zend_finite(a) ((fpclassify((a))!=FP_INFINITE&&fpclassify((a))!=FP_NAN)?1:0)
#else
#define zend_finite(a) (zend_isnan(a) ? 0 : zend_isinf(a) ? 0 : 1)
#endif

#endif /* ifndef ZEND_ACCONFIG_H_NO_C_PROTOS */

#ifdef NETWARE
#ifdef USE_WINSOCK
#/*This detection against winsock is of no use*/ undef HAVE_SOCKLEN_T
#/*This detection against winsock is of no use*/ undef HAVE_SYS_SOCKET_H
#endif
#endif

#undef PTHREADS
])

PHP_MAJOR_VERSION=5
PHP_MINOR_VERSION=5
PHP_RELEASE_VERSION=2
PHP_EXTRA_VERSION="-dev"
PHP_VERSION="$PHP_MAJOR_VERSION.$PHP_MINOR_VERSION.$PHP_RELEASE_VERSION$PHP_EXTRA_VERSION"
PHP_VERSION_ID=`expr [$]PHP_MAJOR_VERSION \* 10000 + [$]PHP_MINOR_VERSION \* 100 + [$]PHP_RELEASE_VERSION`

dnl Allow version values to be used in Makefile
PHP_SUBST(PHP_MAJOR_VERSION)
PHP_SUBST(PHP_MINOR_VERSION)
PHP_SUBST(PHP_RELEASE_VERSION)
PHP_SUBST(PHP_EXTRA_VERSION)

dnl Define where extension directories are located in the configure context
AC_DEFUN([PHP_EXT_BUILDDIR],[ext/$1])dnl
AC_DEFUN([PHP_EXT_DIR],[ext/$1])dnl
AC_DEFUN([PHP_EXT_SRCDIR],[$abs_srcdir/ext/$1])dnl
AC_DEFUN([PHP_ALWAYS_SHARED],[])dnl

dnl Setting up the PHP version based on the information above.
dnl -------------------------------------------------------------------------

echo "/* automatically generated by configure */" > php_version.h.new
echo "/* edit configure.in to change version number */" >> php_version.h.new
echo "#define PHP_MAJOR_VERSION $PHP_MAJOR_VERSION" >> php_version.h.new
echo "#define PHP_MINOR_VERSION $PHP_MINOR_VERSION" >> php_version.h.new
echo "#define PHP_RELEASE_VERSION $PHP_RELEASE_VERSION" >> php_version.h.new
echo "#define PHP_EXTRA_VERSION \"$PHP_EXTRA_VERSION\"" >> php_version.h.new
echo "#define PHP_VERSION \"$PHP_VERSION\"" >> php_version.h.new
echo "#define PHP_VERSION_ID $PHP_VERSION_ID" >> php_version.h.new
cmp php_version.h.new $srcdir/main/php_version.h >/dev/null 2>&1
if test $? -ne 0 ; then
  rm -f $srcdir/main/php_version.h && mv php_version.h.new $srcdir/main/php_version.h && \
  echo 'Updated main/php_version.h'
else
  rm -f php_version.h.new
fi


dnl Catch common errors here to save a few seconds of our users' time
dnl -------------------------------------------------------------------------

if test "$with_shared_apache" != "no" && test -n "$with_shared_apache" ; then
  AC_MSG_ERROR([--with-shared-apache is not supported. Please refer to the documentation for using APXS])
fi

if test -n "$with_apache" && test -n "$with_apxs"; then
  AC_MSG_ERROR([--with-apache and --with-apxs cannot be used together])
fi

if test -n "$with_apxs2filter" && test -n "$with_apxs2"; then
  AC_MSG_ERROR([--with-apxs2filter and --with-apxs2 cannot be used together])
fi

  
dnl Settings we want to make before the checks.
dnl -------------------------------------------------------------------------

cwd=`pwd`

php_shtool=$srcdir/build/shtool
T_MD=`$php_shtool echo -n -e %B`
T_ME=`$php_shtool echo -n -e %b`

PHP_INIT_BUILD_SYSTEM

dnl We want this one before the checks, so the checks can modify CFLAGS.
test -z "$CFLAGS" && auto_cflags=1

abs_srcdir=`(cd $srcdir; pwd)`
abs_builddir=`pwd`

php_abs_top_srcdir=$abs_srcdir
php_abs_top_builddir=$abs_builddir

dnl Because ``make install'' is often performed by the superuser,
dnl we create the libs subdirectory as the user who configures PHP.
dnl Otherwise, the current user will not be able to delete libs
dnl or the contents of libs.

$php_shtool mkdir -p libs
rm -f libs/*

dnl Checks for programs.
dnl -------------------------------------------------------------------------

AC_PROG_CC([cc gcc])
PHP_DETECT_ICC
PHP_DETECT_SUNCC
AC_PROG_CC_C_O
dnl Change to AC_PROG_CC_STDC when we start requiring a post-2.13 autoconf
dnl AC_PROG_CC_STDC
AC_PROG_CPP
AC_AIX
AC_PROG_LN_S

dnl Support systems with system libraries in e.g. /usr/lib64
PHP_ARG_WITH(libdir, for system library directory,
[  --with-libdir=NAME      Look for libraries in .../NAME rather than .../lib],lib,no)

PHP_ARG_ENABLE(rpath, whether to enable runpaths,
[  --disable-rpath         Disable passing additional runtime library
                          search paths], yes, no)

dnl check for -R, etc. switch
PHP_RUNPATH_SWITCH

dnl Checks for some support/generator progs
PHP_PROG_AWK
PHP_PROG_BISON
PHP_PROG_RE2C

dnl Check if bison generated files exist when bison does not..
case $php_cv_bison_version in
  ""|invalid[)]
    if ! test -f "$abs_srcdir/Zend/zend_language_parser.h" || ! test -f "$abs_srcdir/Zend/zend_language_parser.c" ; then
      AC_MSG_ERROR([bison is required to build PHP/Zend when building a GIT checkout!])
    fi
    ;;
esac

PHP_ARG_ENABLE(re2c-cgoto, whether to enable computed goto gcc extension with re2c,
[  --enable-re2c-cgoto     Enable -g flag to re2c to use computed goto gcc extension], no, no)

if test "$PHP_RE2C_CGOTO" = "no"; then
  RE2C_FLAGS=""
else
  AC_MSG_CHECKING([whether re2c -g works])
  AC_TRY_COMPILE([],[
int main(int argc, const char **argv)
{
  argc = argc;
  argv = argv;
label1:
label2:
  static void *adr[] = { &&label1, &&label2};
  goto *adr[0];
  return 0;
}