# Generated with generate_ssl_tests.pl

num_tests = 55

test-0 = 0-curve-prime256v1
test-1 = 1-curve-secp384r1
test-2 = 2-curve-secp521r1
test-27 = 27-curve-brainpoolP256r1
test-28 = 28-curve-brainpoolP384r1
test-29 = 29-curve-brainpoolP512r1
test-30 = 30-curve-sect233k1-tls13
test-31 = 31-curve-sect233r1-tls13
test-32 = 32-curve-sect283k1-tls13
test-33 = 33-curve-sect283r1-tls13
test-34 = 34-curve-sect409k1-tls13
test-35 = 35-curve-sect409r1-tls13
test-36 = 36-curve-sect571k1-tls13
test-37 = 37-curve-sect571r1-tls13
test-38 = 38-curve-secp224r1-tls13
test-39 = 39-curve-sect163k1-tls13
test-40 = 40-curve-sect163r2-tls13
test-41 = 41-curve-prime192v1-tls13
test-42 = 42-curve-sect163r1-tls13
test-43 = 43-curve-sect193r1-tls13
test-44 = 44-curve-sect193r2-tls13
test-45 = 45-curve-sect239k1-tls13
test-46 = 46-curve-secp160k1-tls13
test-47 = 47-curve-secp160r1-tls13
test-48 = 48-curve-secp160r2-tls13
test-49 = 49-curve-secp192k1-tls13
test-50 = 50-curve-secp224k1-tls13
test-51 = 51-curve-secp256k1-tls13
test-52 = 52-curve-brainpoolP256r1-tls13
test-53 = 53-curve-brainpoolP384r1-tls13
test-54 = 54-curve-brainpoolP512r1-tls13
# ===========================================================

[0-curve-prime256v1]
ssl_conf = 0-curve-prime256v1-ssl

# ===========================================================

[30-curve-sect233k1-tls13]
ssl_conf = 30-curve-sect233k1-tls13-ssl

[30-curve-sect233k1-tls13-ssl]
server = 30-curve-sect233k1-tls13-server
client = 30-curve-sect233k1-tls13-client

[30-curve-sect233k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect233k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[30-curve-sect233k1-tls13-client]
CipherString = ECDHE
Curves = sect233k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-30]
ExpectedResult = ClientFail


# ===========================================================

[31-curve-sect233r1-tls13]
ssl_conf = 31-curve-sect233r1-tls13-ssl

[31-curve-sect233r1-tls13-ssl]
server = 31-curve-sect233r1-tls13-server
client = 31-curve-sect233r1-tls13-client

[31-curve-sect233r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect233r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[31-curve-sect233r1-tls13-client]
CipherString = ECDHE
Curves = sect233r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-31]
ExpectedResult = ClientFail


# ===========================================================

[32-curve-sect283k1-tls13]
ssl_conf = 32-curve-sect283k1-tls13-ssl

[32-curve-sect283k1-tls13-ssl]
server = 32-curve-sect283k1-tls13-server
client = 32-curve-sect283k1-tls13-client

[32-curve-sect283k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect283k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[32-curve-sect283k1-tls13-client]
CipherString = ECDHE
Curves = sect283k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-32]
ExpectedResult = ClientFail


# ===========================================================

[33-curve-sect283r1-tls13]
ssl_conf = 33-curve-sect283r1-tls13-ssl

[33-curve-sect283r1-tls13-ssl]
server = 33-curve-sect283r1-tls13-server
client = 33-curve-sect283r1-tls13-client

[33-curve-sect283r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect283r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[33-curve-sect283r1-tls13-client]
CipherString = ECDHE
Curves = sect283r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-33]
ExpectedResult = ClientFail


# ===========================================================

[34-curve-sect409k1-tls13]
ssl_conf = 34-curve-sect409k1-tls13-ssl

[34-curve-sect409k1-tls13-ssl]
server = 34-curve-sect409k1-tls13-server
client = 34-curve-sect409k1-tls13-client

[34-curve-sect409k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect409k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[34-curve-sect409k1-tls13-client]
CipherString = ECDHE
Curves = sect409k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-34]
ExpectedResult = ClientFail


# ===========================================================

[35-curve-sect409r1-tls13]
ssl_conf = 35-curve-sect409r1-tls13-ssl

[35-curve-sect409r1-tls13-ssl]
server = 35-curve-sect409r1-tls13-server
client = 35-curve-sect409r1-tls13-client

[35-curve-sect409r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect409r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[35-curve-sect409r1-tls13-client]
CipherString = ECDHE
Curves = sect409r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-35]
ExpectedResult = ClientFail


# ===========================================================

[36-curve-sect571k1-tls13]
ssl_conf = 36-curve-sect571k1-tls13-ssl

[36-curve-sect571k1-tls13-ssl]
server = 36-curve-sect571k1-tls13-server
client = 36-curve-sect571k1-tls13-client

[36-curve-sect571k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect571k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[36-curve-sect571k1-tls13-client]
CipherString = ECDHE
Curves = sect571k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-36]
ExpectedResult = ClientFail


# ===========================================================

[37-curve-sect571r1-tls13]
ssl_conf = 37-curve-sect571r1-tls13-ssl

[37-curve-sect571r1-tls13-ssl]
server = 37-curve-sect571r1-tls13-server
client = 37-curve-sect571r1-tls13-client

[37-curve-sect571r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect571r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[37-curve-sect571r1-tls13-client]
CipherString = ECDHE
Curves = sect571r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-37]
ExpectedResult = ClientFail


# ===========================================================

[38-curve-secp224r1-tls13]
ssl_conf = 38-curve-secp224r1-tls13-ssl

[38-curve-secp224r1-tls13-ssl]
server = 38-curve-secp224r1-tls13-server
client = 38-curve-secp224r1-tls13-client

[38-curve-secp224r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp224r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[38-curve-secp224r1-tls13-client]
CipherString = ECDHE
Curves = secp224r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-38]
ExpectedResult = ClientFail


# ===========================================================

[39-curve-sect163k1-tls13]
ssl_conf = 39-curve-sect163k1-tls13-ssl

[39-curve-sect163k1-tls13-ssl]
server = 39-curve-sect163k1-tls13-server
client = 39-curve-sect163k1-tls13-client

[39-curve-sect163k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[39-curve-sect163k1-tls13-client]
CipherString = ECDHE
Curves = sect163k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-39]
ExpectedResult = ClientFail


# ===========================================================

[40-curve-sect163r2-tls13]
ssl_conf = 40-curve-sect163r2-tls13-ssl

[40-curve-sect163r2-tls13-ssl]
server = 40-curve-sect163r2-tls13-server
client = 40-curve-sect163r2-tls13-client

[40-curve-sect163r2-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163r2
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[40-curve-sect163r2-tls13-client]
CipherString = ECDHE
Curves = sect163r2
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-40]
ExpectedResult = ClientFail


# ===========================================================

[41-curve-prime192v1-tls13]
ssl_conf = 41-curve-prime192v1-tls13-ssl

[41-curve-prime192v1-tls13-ssl]
server = 41-curve-prime192v1-tls13-server
client = 41-curve-prime192v1-tls13-client

[41-curve-prime192v1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = prime192v1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[41-curve-prime192v1-tls13-client]
CipherString = ECDHE
Curves = prime192v1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-41]
ExpectedResult = ClientFail


# ===========================================================

[42-curve-sect163r1-tls13]
ssl_conf = 42-curve-sect163r1-tls13-ssl

[42-curve-sect163r1-tls13-ssl]
server = 42-curve-sect163r1-tls13-server
client = 42-curve-sect163r1-tls13-client

[42-curve-sect163r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect163r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[42-curve-sect163r1-tls13-client]
CipherString = ECDHE
Curves = sect163r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-42]
ExpectedResult = ClientFail


# ===========================================================

[43-curve-sect193r1-tls13]
ssl_conf = 43-curve-sect193r1-tls13-ssl

[43-curve-sect193r1-tls13-ssl]
server = 43-curve-sect193r1-tls13-server
client = 43-curve-sect193r1-tls13-client

[43-curve-sect193r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect193r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[43-curve-sect193r1-tls13-client]
CipherString = ECDHE
Curves = sect193r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-43]
ExpectedResult = ClientFail


# ===========================================================

[44-curve-sect193r2-tls13]
ssl_conf = 44-curve-sect193r2-tls13-ssl

[44-curve-sect193r2-tls13-ssl]
server = 44-curve-sect193r2-tls13-server
client = 44-curve-sect193r2-tls13-client

[44-curve-sect193r2-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect193r2
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[44-curve-sect193r2-tls13-client]
CipherString = ECDHE
Curves = sect193r2
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-44]
ExpectedResult = ClientFail


# ===========================================================

[45-curve-sect239k1-tls13]
ssl_conf = 45-curve-sect239k1-tls13-ssl

[45-curve-sect239k1-tls13-ssl]
server = 45-curve-sect239k1-tls13-server
client = 45-curve-sect239k1-tls13-client

[45-curve-sect239k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = sect239k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[45-curve-sect239k1-tls13-client]
CipherString = ECDHE
Curves = sect239k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-45]
ExpectedResult = ClientFail


# ===========================================================

[46-curve-secp160k1-tls13]
ssl_conf = 46-curve-secp160k1-tls13-ssl

[46-curve-secp160k1-tls13-ssl]
server = 46-curve-secp160k1-tls13-server
client = 46-curve-secp160k1-tls13-client

[46-curve-secp160k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[46-curve-secp160k1-tls13-client]
CipherString = ECDHE
Curves = secp160k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-46]
ExpectedResult = ClientFail


# ===========================================================

[47-curve-secp160r1-tls13]
ssl_conf = 47-curve-secp160r1-tls13-ssl

[47-curve-secp160r1-tls13-ssl]
server = 47-curve-secp160r1-tls13-server
client = 47-curve-secp160r1-tls13-client

[47-curve-secp160r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[47-curve-secp160r1-tls13-client]
CipherString = ECDHE
Curves = secp160r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-47]
ExpectedResult = ClientFail


# ===========================================================

[48-curve-secp160r2-tls13]
ssl_conf = 48-curve-secp160r2-tls13-ssl

[48-curve-secp160r2-tls13-ssl]
server = 48-curve-secp160r2-tls13-server
client = 48-curve-secp160r2-tls13-client

[48-curve-secp160r2-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp160r2
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[48-curve-secp160r2-tls13-client]
CipherString = ECDHE
Curves = secp160r2
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-48]
ExpectedResult = ClientFail


# ===========================================================

[49-curve-secp192k1-tls13]
ssl_conf = 49-curve-secp192k1-tls13-ssl

[49-curve-secp192k1-tls13-ssl]
server = 49-curve-secp192k1-tls13-server
client = 49-curve-secp192k1-tls13-client

[49-curve-secp192k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp192k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[49-curve-secp192k1-tls13-client]
CipherString = ECDHE
Curves = secp192k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-49]
ExpectedResult = ClientFail


# ===========================================================

[50-curve-secp224k1-tls13]
ssl_conf = 50-curve-secp224k1-tls13-ssl

[50-curve-secp224k1-tls13-ssl]
server = 50-curve-secp224k1-tls13-server
client = 50-curve-secp224k1-tls13-client

[50-curve-secp224k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp224k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[50-curve-secp224k1-tls13-client]
CipherString = ECDHE
Curves = secp224k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-50]
ExpectedResult = ClientFail


# ===========================================================

[51-curve-secp256k1-tls13]
ssl_conf = 51-curve-secp256k1-tls13-ssl

[51-curve-secp256k1-tls13-ssl]
server = 51-curve-secp256k1-tls13-server
client = 51-curve-secp256k1-tls13-client

[51-curve-secp256k1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = secp256k1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[51-curve-secp256k1-tls13-client]
CipherString = ECDHE
Curves = secp256k1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-51]
ExpectedResult = ClientFail


# ===========================================================

[52-curve-brainpoolP256r1-tls13]
ssl_conf = 52-curve-brainpoolP256r1-tls13-ssl

[52-curve-brainpoolP256r1-tls13-ssl]
server = 52-curve-brainpoolP256r1-tls13-server
client = 52-curve-brainpoolP256r1-tls13-client

[52-curve-brainpoolP256r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP256r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[52-curve-brainpoolP256r1-tls13-client]
CipherString = ECDHE
Curves = brainpoolP256r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-52]
ExpectedResult = ClientFail


# ===========================================================

[53-curve-brainpoolP384r1-tls13]
ssl_conf = 53-curve-brainpoolP384r1-tls13-ssl

[53-curve-brainpoolP384r1-tls13-ssl]
server = 53-curve-brainpoolP384r1-tls13-server
client = 53-curve-brainpoolP384r1-tls13-client

[53-curve-brainpoolP384r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP384r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[53-curve-brainpoolP384r1-tls13-client]
CipherString = ECDHE
Curves = brainpoolP384r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-53]
ExpectedResult = ClientFail


# ===========================================================

[54-curve-brainpoolP512r1-tls13]
ssl_conf = 54-curve-brainpoolP512r1-tls13-ssl

[54-curve-brainpoolP512r1-tls13-ssl]
server = 54-curve-brainpoolP512r1-tls13-server
client = 54-curve-brainpoolP512r1-tls13-client

[54-curve-brainpoolP512r1-tls13-server]
Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem
CipherString = DEFAULT
Curves = brainpoolP512r1
MaxProtocol = TLSv1.3
PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem

[54-curve-brainpoolP512r1-tls13-client]
CipherString = ECDHE
Curves = brainpoolP512r1
MinProtocol = TLSv1.3
VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem
VerifyMode = Peer

[test-54]
ExpectedResult = ClientFail

